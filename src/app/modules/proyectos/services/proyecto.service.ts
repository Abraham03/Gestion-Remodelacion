// src/app/modules/proyectos/services/proyectos.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Proyecto } from '../models/proyecto.model';
import { environment } from '../../../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class ProyectosService {
  private apiUrl = `${environment.apiUrl}/proyectos`;

  constructor(private http: HttpClient) {}

  getProyectos(): Observable<Proyecto[]> {
    return this.http.get<Proyecto[]>(this.apiUrl);
  }

  getProyectoById(id: number): Observable<Proyecto> {
    return this.http.get<Proyecto>(`${this.apiUrl}/${id}`);
  }

  addProyecto(proyecto: Proyecto): Observable<Proyecto> {
    // IMPORTANT: Create a new object to avoid modifying the original 'proyecto' object
    // Remove fields that are typically backend-generated or not part of the create request DTO
    const projectToSend: Partial<Proyecto> = { ...proyecto }; // Use Partial for type safety while deleting properties
    delete projectToSend.id; // ID is generated by the backend
    delete projectToSend.nombreCliente; // Backend populates this based on idCliente
    delete projectToSend.nombreEmpleadoResponsable; // Backend populates this based on idEmpleadoResponsable
    delete projectToSend.fechaCreacion; // Backend sets creation date

    return this.http.post<Proyecto>(this.apiUrl, projectToSend);
  }

  updateProyecto(proyecto: Proyecto): Observable<Proyecto> {
    // IMPORTANT: Create a new object to avoid modifying the original 'proyecto' object
    // Remove fields that are typically backend-generated or not meant for update via frontend
    const projectToSend: Partial<Proyecto> = { ...proyecto }; // Use Partial for type safety while deleting properties
    // Do NOT delete projectToSend.id here as it's used in the URL.
    delete projectToSend.nombreCliente; // Backend might regenerate/re-fetch this
    delete projectToSend.nombreEmpleadoResponsable; // Backend might regenerate/re-fetch this
    delete projectToSend.fechaCreacion; // This field is usually immutable after creation

    return this.http.put<Proyecto>(`${this.apiUrl}/${proyecto.id}`, projectToSend);
  }

  deleteProyecto(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}